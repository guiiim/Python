# -*- coding: utf-8 -*-
"""Desafio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YcWhG2S6MrEP0lYb9j1otQNdDTDVREY6

Bibliotecas importadas
"""

#Importando todas as bibliotecas
import pandas as pd
import numpy as np
import seaborn as sns

import matplotlib.pyplot as plt 
from sklearn import metrics
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error

from sklearn.model_selection import train_test_split 
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression

"""Tratamento de dados"""

#Importando a base de dados
from google.colab import files

uploaded = files.upload()

#Fazendo a leitura da base de dados
dataset = pd.read_csv('/content/comp_bikes_mod.csv')

#Primeiras informações da base de dados
print(dataset.shape)
dataset.info()
dataset.head()

#Verificando dados nulos
dataset.isnull().sum()

#Retirando as linhas que contém 'dteday' com valores nulos
dataset = dataset.dropna(subset=['dteday'])
print(dataset.shape)
dataset.info()
dataset.head()

"""Pergunta 1"""

#Considere o dataset após a retirada das linhas que continham valores nulos para a coluna "dteday". 
#Transforme a coluna "dteday" no tipo "datetime". 
#Qual é a última data presente no dataset ( YYYY-MM-DD)?

dataset['dteday'] = pd.to_datetime(dataset['dteday']) #transformando a coluna em datetime
dataset.tail() #mostrando os últimos resultados

#2012-12-31

"""Pergunta 2"""

#Considere o dataset após a retirada das linhas que continham valores nulos para a coluna "dteday". 
#Considerendo o boxplot da variável "windspeed" (velocidade do vento) é CORRETO afirmar?

dataset.boxplot(['windspeed'])

#Existem possíveis outliers, pois existem marcações (pontos) foras dos limites do boxplot.

"""Pergunta 3"""

#Considere o dataset após a retirada das linhas que continham valores nulos para a coluna "dteday". 
#Selecione as colunas "season", "temp", "atemp", "hum", "windspeed". 
#Plot a matriz de correlação. 
#Sobre as variáveis "hum" e "cnt" é CORRETO afirmar:

plt.figure(figsize=(10, 8)) #configurando tamanho da imagem
corr = dataset[['season', 'temp', 'atemp', 'hum', 'windspeed', 'cnt']].corr() #configurando dados a serem correlacionados
sns.heatmap(corr, annot=True, fmt='.1g') #propriedades do heatmap
plt.show();

#Possuem baixa correlação linear negativa.

"""Pergunta 4"""

#Quantos tipos diferentes de dados existem no dataset do desafio?

dataset.info()

#2 - datetime64[ns] e float64

"""Pergunta 5"""

#Com base na árvore de decisão é CORRETO afirmar:

#Pode ser utilizada para classificação e regressão.

"""Pergunta 6"""

#Qual é a proporção (em %) de valores nulos existente na coluna "temp" (temperatura ambiente normalizada)?

dataset.info()
print(((15461-14066)/15461)*100) 

#10%

"""Pergunta 7"""

#Considere o dataset após a retirada das linhas que continham valores nulos para a coluna "dteday". 
#Transforme a coluna "season" em valores categóricos. 
#Quantas categorias diferentes existem?

#4

dataset['season'] = dataset['season'].astype('category') #transformando a coluna em categórica
dataset['season'].dtypes #verificando as categorias

"""Pergunta 8

datasetArvore = dataset[['hum','casual','cnt']] #criando dataset para aplicar regressão

x = datasetArvore[['hum','casual']] #definindo variáveis independentes
y = datasetArvore['cnt'] #definindo variáveis dependentes

modeloArvore = DecisionTreeRegressor() #criando o modelo

modeloArvore.fit(x, y) # Fit do modelo

y_pred = modeloArvore.predict(x) #verificar previsões

accuracy = r2_score(y, y_pred) #Verificando resultados
print("Valor de R2: %0.2f" % accuracy)

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-82-8eb2f8dbf168> in <module>()
     10 modeloArvore = DecisionTreeRegressor() #criando o modelo
     11 
---> 12 modeloArvore.fit(x, y) # Fit do modelo
     13 
     14 y_pred = modeloArvore.predict(x) #verificar previsões


     
ValueError: Input contains NaN, infinity or a value too large for dtype('float32')

**Necessário retirar valores nulos!**
"""

#Utilize os mesmos dados da questão anterior ("hum" e "casual" como variáveis independentes e "cnt" como variavel dependente). 
#Aplique a árvore de decisão como regressão. 
#Qual é o valor aproximado de R2? Utilize as entradas como teste e valores "default".

datasetArvore = dataset[['hum','casual','cnt']] #criando dataset para aplicar regressão

datasetArvore.fillna(datasetArvore.mean(), inplace=True) #preenchendo o dataset novo com a média dos valores

x = datasetArvore[['hum','casual']] #definindo variáveis independentes
y = datasetArvore['cnt'] #definindo variáveis dependentes

modeloArvore = DecisionTreeRegressor() #criando o modelo

modeloArvore.fit(x, y) # Fit do modelo

y_pred = modeloArvore.predict(x) #verificar previsões

accuracy = r2_score(y, y_pred) #Verificando resultados
print("Valor de R2: %0.2f" % accuracy)

#Resposta 0,70

"""Pergunta 9"""

#Preencha os valores nulos das colunas "hum","cnt" e "casual" com os valores médios. 
#Utilize as variáveis "hum" e "casual" como independentes e a "cnt" como dependente. 
#Aplique uma regressão linear. 
#Qual o valor de R2? Utilize as entradas como teste.

datasetRegressao = dataset[['hum','casual','cnt']] #criando dataset para aplicar regressão

datasetRegressao.fillna(datasetRegressao.mean(), inplace=True) #preenchendo o dataset novo com a média dos valores

x = datasetRegressao[['hum','casual']] #definindo variáveis independentes
y = datasetRegressao['cnt'] #definindo variáveis dependentes

modeloRegressao = LinearRegression() #criando o modelo

modeloRegressao.fit(x, y) # Fit do modelo

y_pred = modeloRegressao.predict(x) #verificar previsões

accuracy = r2_score(y, y_pred) #Verificando resultados
print("Valor de R2: %0.2f" % accuracy)

#Resposta 0,40

"""Pergunta 10"""

#No dataset utilizado para o desafio, quantas instâncias e atributos existem, respectivamente?

datasetOriginal = pd.read_csv('/content/comp_bikes_mod.csv')

print(datasetOriginal.shape)

#17379, 17

"""Pergunta 11"""

#Considere o dataset após a retirada das linhas que continham valores nulos para a coluna "dteday". 
#Qual é o desvio padrão para os dados da coluna "windspeed" (velocidade do vento normalizada)?

dataset['windspeed'].describe()

#0,122

"""Pergunta 12"""

#Considere o dataset após a retirada das linhas que continham valores nulos para a coluna "dteday". 
#Qual é o valor médio para os dados da coluna "temp" (temperatura ambiente normalizada)?

dataset['temp'].describe()

#0,496

"""Pergunta 13"""

#Após retirar as linhas que contém valores nulos para a coluna "dteday", 
#passamos a contar com quantas instancias e atributos, respectivamente?

print(dataset.shape)

#15641, 17

"""Pergunta 14"""

#Comparando os valores de R2 encontrado com a regressão linear e com a árvore de decisão, é CORRETO afirmar:
#Árvore = 0,7
#Regressão = 0,4

#O valor obtido pela árvore de decisão como regressor apresenta maior R2

"""Pergunta 15"""

#Comparando o SVM com a árvore de decisão é CORRETO afirmar:

#SVM encontra o hiperplano que gera a maior separação entre os dados.