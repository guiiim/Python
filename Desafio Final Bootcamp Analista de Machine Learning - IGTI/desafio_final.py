# -*- coding: utf-8 -*-
"""Desafio Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RJCnvo4NAR-i-ohEHYlfqTItmA583Mdk

Importando bibliotecas
"""

import pandas as pd
import numpy as np
import seaborn as sns

from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.decomposition import PCA
from sklearn.metrics import classification_report

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.cluster import KMeans

"""Importando base de dados"""

from google.colab import files
uploaded = files.upload()

cars = pd.read_csv('cars.csv', sep=",")

"""Verificando informações iniciais

Pergunta 1 - Após a utilização da biblioteca pandas para a leitura dos dados sobre os valores lidos, é CORRETO afirmar:
"""

print(cars.shape)
cars.info()
cars.head()


#R: Não foram encontrados valores nulos após a leitura dos dados.

"""Pergunta 2 - Realize a transformação das colunas “cubicinches” e “weightlbs” do tipo “string” para o tipo numérico utilizando o pd.to_numeric(), utilizando o parâmetro  errors='coerce'. Após essa transformação é CORRETO afirmar:"""

cars['cubicinches'] = pd.to_numeric(cars['cubicinches'], errors='coerce')
cars['weightlbs'] = pd.to_numeric(cars['weightlbs'], errors='coerce')

cars.info()
cars.head()

#R: Essa transformação adiciona valores nulos ao nosso dataset.

"""Pergunta 3 - Indique quais eram os índices dos valores presentes no dataset que “forçaram” o pandas a compreender a variável “cubicinches” como string."""

cars.loc[cars['cubicinches'].isnull()]

#R: 40 e 180

"""Pergunta 4 - Após a transformação das variáveis “string” para os valores numéricos, quantos valores nulos (células no dataframe) passaram a existir no dataset?"""

cars.isnull().sum()

#R: 5

"""Pergunta 5 - Substitua os valores nulos introduzidos no dataset, após a transformação, pelo valor médio das colunas. Qual é o novo valor médio da coluna “weightlbs”?"""

cars['cubicinches'].fillna(cars['cubicinches'].mean(), inplace=True)
cars['weightlbs'].fillna(cars['weightlbs'].mean(), inplace=True)

cars.describe()

#R: 3009.8333333

"""Pergunta 6 - Após substituir os valores nulos pela média das colunas, selecione as colunas ['mpg', 'cylinders', 'cubicinches', 'hp', 'weightlbs', 'time-to-60', 'year']. Qual é o valor da mediana para a característica 'mpg'?"""

cars1 = cars[['mpg', 'cylinders', 'cubicinches', 'hp', 'weightlbs', 'time-to-60', 'year']]
cars1['mpg'].median()

#R: 22

"""Pergunta 7 - Qual é a afirmação CORRETA sobre o valor de 14,00 para a variável “time-to-60”?"""

cars1['time-to-60'].describe()

#R: 75% dos dados são maiores que o valor de 14,00.

"""Pergunta 8 - Sobre o coeficiente de correlação de Pearson entre as variáveis “cylinders” e “mpg”, é correto afirmar, EXCETO:"""

cars1[['mpg', 'cylinders']].corr()

#R: Mesmo não sendo igual a 1, é possível dizer que à medida que a variável “cylinders” aumenta, a variável “mpg” também aumenta em uma mesma direção.

"""Pergunta 9 - Sobre o boxplot da variável “hp”, é correto afirmar, EXCETO:"""

sns.boxplot(cars1['hp']);
cars1['hp'].describe()

#R: Existe uma maior dispersão no segundo quartil quando comparamos com o terceiro.

"""Pergunta 10 - Após normalizado, utilizando a função StandardScaler(), qual é o maior valor para a variável “hp”?"""

padroniza = StandardScaler()

colunas = cars1.columns
cars2 = padroniza.fit_transform(cars1)
cars2 = pd.DataFrame(cars2, columns=colunas)

print(cars2['hp'].max())

#R: 1,45 - Revisar com IGTI

"""Pergunta 11 - Aplicando o PCA, conforme a definição acima, qual é o valor da variância explicada com pela primeira componente principal?"""

pca = PCA(n_components=7)

pca_11 = pca.fit_transform(cars2)
pca.explained_variance_ratio_[0]

#R:72%

"""Pergunta 12 - Utilize os três primeiros componentes principais para construir o K-means com um número de 3 clusters. Sobre os clusters, é INCORRETO afirmar:"""

kmeans = KMeans(n_clusters=3,random_state=42)

q12 = kmeans.fit_predict(cars2)
kmeans.cluster_centers_

pd.Series(q12).value_counts()

#R: Todos os clusters possuem a mesma quantidade de elementos.

"""Pergunta 13 - Após todo o processamento realizado nos itens anteriores, crie uma coluna que contenha a variável de eficiência do veículo. Veículos que percorrem mais de 25 milhas com um galão (“mpg”>25) devem ser considerados eficientes. Utilize as colunas  ['cylinders' ,'cubicinches' ,'hp' ,'weightlbs','time-to-60'] como entradas e como saída a coluna de eficiência criada. Utilizando a árvore de decisão como mostrado, qual é a acurácia do modelo?"""

eficiencia = np.where(cars1['mpg'] > 25, 1, 0)

pd.Series(eficiencia).value_counts()

cars3 = cars2[['cylinders' ,'cubicinches' ,'hp' ,'weightlbs','time-to-60']]

ad = DecisionTreeClassifier(random_state=42)

X_train, X_test, y_train, y_test = train_test_split(cars3, eficiencia, test_size=0.3, random_state=42)

ad.fit(X_train, y_train)

previsaoAd = ad.predict(X_test)

confusaoAd = confusion_matrix(y_test, previsaoAd)
sns.heatmap(confusaoAd, cmap="YlGnBu", annot=True)

print("Acurácia: {}".format(((33+36)/79)*100))

#R: Aproximadamente, 0,87.

"""Pergunta 14 - Sobre a matriz de confusão obtida após a aplicação da árvore de decisão, como mostrado anteriormente, é INCORRETO afirmar:"""

confusaoAd = confusion_matrix(y_test, previsaoAd)
sns.heatmap(confusaoAd, cmap="YlGnBu", annot=True)

#R: Existem duas vezes mais veículos considerados não eficientes que instâncias de veículos eficientes.

"""Pergunta 15 - Utilizando a mesma divisão de dados entre treinamento e teste empregada para a análise anterior, aplique o modelo de regressão logística como mostrado na descrição do trabalho. Comparando os resultados obtidos com o modelo de árvore de decisão, é INCORRETO afirmar:"""

lR = LogisticRegression(random_state=42)

lR.fit(X_train, y_train)

previsaoLr = lR.predict(X_test)

print('Regressão Logística:')
print(classification_report(y_test, previsaoLr))
print('Árvore de Decisão:')
print(classification_report(y_test, previsaoAd))

#R:A regressão logística não deveria ser aplicada ao problema, pois ela trabalha apenas com dados categóricos.